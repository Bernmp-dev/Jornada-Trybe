// ----------------- üöÄ Exerc√≠cio 1
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

// const ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
// const elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';

// const testingScope = escopo => escopo 
// ? console.log(`${ifScope} √≥timo, fui utilizada no escopo !`) 
// : console.log(elseScope);

// testingScope(true);

// ----------------- Crie uma fun√ß√£o que retorne um array em ordem crescente.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];


// const sortOddsAndEvens = () => {
//   // Seu c√≥digo aqui.
//   let ordered = [];
//   for (let i = 0; i < 6; i += 1) {
//     let min = Math.min(...oddsAndEvens);
//     ordered[i] = min;
//     oddsAndEvens.splice(oddsAndEvens.indexOf(min), 1);
//   }
//   return ordered
// }
// console.log(`Os n√∫meros ${sortOddsAndEvens()} se encontram ordenados de forma crescente!`);

// ----------------- Crie uma fun√ß√£o que retorne um array em ordem crescente.

// ----------------- B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// console.log(`Os n√∫meros ${oddsAndEvens.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`);

